<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CertNameHelp" xml:space="preserve">
    <value>Enter the name of certificate’s owner.

WARNING! This name cannot be changed without the application reinstallation. Please, enter the name accurately (not less than 3 letters). This information will not leave this device</value>
  </data>
  <data name="ChatResetRequest" xml:space="preserve">
    <value>This option will clean up the chat. Continue?</value>
  </data>
  <data name="ConnectionLost" xml:space="preserve">
    <value>WiFi connection is unavailable. Generation has been interrupted</value>
  </data>
  <data name="DevMessage" xml:space="preserve">
    <value>By sending a letter to the developer, you de-anonymize your E-mail!

In addition, your results will be included in the draft letter. Don't forget to delete them if you don't plan on sharing them.

Do you want to continue?</value>
  </data>
  <data name="GettingSentence" xml:space="preserve">
    <value>Your companion is typing...</value>
  </data>
  <data name="HiResults" xml:space="preserve">
    <value>Registered results:</value>
  </data>
  <data name="KernelMethod" xml:space="preserve">
    <value>Kernel: </value>
  </data>
  <data name="Method00" xml:space="preserve">
    <value>Method based on OS kernel entropy</value>
  </data>
  <data name="Method01" xml:space="preserve">
    <value>Method based on WiFi signal</value>
  </data>
  <data name="Method02" xml:space="preserve">
    <value>Combined method (core + WiFi)</value>
  </data>
  <data name="MethodName" xml:space="preserve">
    <value>Method #{0:D}
Deflection: {1:S}
Events: {2:D}</value>
  </data>
  <data name="MethodSelect" xml:space="preserve">
    <value>Select random number generation method:</value>
  </data>
  <data name="SaveFileFailure" xml:space="preserve">
    <value>Failed to save certificate. Allow the application to write to device storage and try again</value>
  </data>
  <data name="SaveFileSuccess" xml:space="preserve">
    <value>The certificate is saved in downloads folder</value>
  </data>
  <data name="SolutionPage" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="StartingGeneration" xml:space="preserve">
    <value>Starting the generation...</value>
  </data>
  <data name="Tip00" xml:space="preserve">
    <value>Welcome to the paranormal activity search tool!

Please read the description and explanations on this page of the app before starting for a better understanding of how the tool works and the essence of the experiment</value>
  </data>
  <data name="Tip01" xml:space="preserve">
    <value>Congratulations! It looks like you have found some paranormal activity!

Now you can get a certificate confirming this – the corresponding button is available at the bottom of this screen. However, to exclude a possible accidental triggering, we recommend continuing to participate in the experiment to increase the reliability of your result. All new events will also be added to your certificate</value>
  </data>
  <data name="Tip02" xml:space="preserve">
    <value>Attention! Most of messages in the new “Talk to me” section will most likely not make sense. This is fine. We’re only interested in those cases where the answers show signs of intelligence or – more likely – the characteristic features of communication on the part of the “interlocutor”</value>
  </data>
  <data name="TTM1Page" xml:space="preserve">
    <value>Talk to me</value>
  </data>
  <data name="TTM2Page" xml:space="preserve">
    <value>Show me the hidden</value>
  </data>
  <data name="WiFiMethod" xml:space="preserve">
    <value>WiFi: </value>
  </data>
</root>